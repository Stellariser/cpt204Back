<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.First.dao.PostMapper">

    <resultMap id="PostResultMap" type="com.First.pojo.Post">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="title" jdbcType="VARCHAR" property="title" />
        <result column="writer_id" jdbcType="BIGINT" property="writerId" />
        <result column="written_time" jdbcType="TIMESTAMP" property="writtenTime" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
        <result column="content" jdbcType="VARCHAR" property="content" />
        <result column="anonymous" jdbcType="BIGINT" property="anonymous" />
        <result column="total_likes" jdbcType="BIGINT" property="totalLikes" />
        <result column="new_likes" jdbcType="BIGINT" property="newLikes" />
        <result column="criticism" jdbcType="BIGINT" property="criticism" />
        <result column="views" jdbcType="BIGINT" property="views" />
        <result column="is_deleted" jdbcType="BIGINT" property="isDeleted" />
    </resultMap>

    <insert id="addPost" parameterType="com.First.pojo.Post">
        insert into t_post (title,writer_id,written_time,content,anonymous,is_deleted) values (#{title},#{writerId},#{writtenTime},#{content},#{anonymous},#{isDeleted})
    </insert>

    <update id="deletePostById" parameterType="int">
        update t_post set is_deleted=1 where id = #{id};
    </update>

    <update id="updatePost" parameterType="com.First.pojo.Post">
        update t_post set title=#{title},update_time=#{updateTime},content=#{content},anonymous=#{anonymous} where id =#{id} and is_deleted=0;
    </update>

    <update id="updatePostViews" parameterType="com.First.pojo.Post">
        update t_post set views=#{views} where id =#{id}
    </update>

    <update id="updateTotalLikes" parameterType="com.First.pojo.Post">
        update t_post set total_likes=#{totalLikes} where id =#{id}
    </update>

    <update id="updateNewLikes" parameterType="com.First.pojo.Post">
        update t_post set new_likes=#{newLikes} where id =#{id}
    </update>

    <update id="updatePostCriticism" parameterType="com.First.pojo.Post">
        update t_post set criticism=#{criticism} where id =#{id}
    </update>

    <select id="queryPostById" resultMap="PostResultMap" parameterType="int">
        select * from t_post where id = #{id} and is_deleted=0
    </select>

    <select id="queryAllPost" resultMap="PostResultMap">
        select * from t_post where is_deleted=0
    </select>

    <select id="queryPostByTitle" resultMap="PostResultMap">
        select * from t_post where title=#{title} and is_deleted=0
    </select>

    <select id="queryGlobalPost" resultMap="PostResultMap" parameterType="com.First.VO.PostQueryInfo">
        select 		p.id,
        p.title,
        p.writer_id,
        p.written_time,
        p.content,
        p.anonymous,
        p.total_likes,
        p.criticism,
        p.views,
        ty.type_name,
        GROUP_CONCAT(DISTINCT ty.id) typelist,
        GROUP_CONCAT(DISTINCT ty.type_name) typeContent
        from t_post p

        LEFT JOIN t_type_to_post tp on tp.post_id = p.id
        LEFT JOIN t_type ty on ty.id=tp.type_id

        WHERE 1=1
          and p.is_deleted =0
        <if test="query != null"> and p.title like '%${query}%'</if>
        <if test="typeList!=null">
            and ty.id in
            <foreach collection="typeList" index="index" item="item" open="(" separator="," close=")">
                ${item}
            </foreach>
        </if>

        <if test="query != null"> and title like '%${query}%'</if>
        GROUP BY p.id
        order by p.id desc

    </select>

    <select id="queryPostByUserId" resultMap="PostResultMap">
        select * from t_post where writer_id = #{userId} and is_deleted=0 order by t_post.id desc
    </select>

    <!--- getting list of post -->
    <select id="getAllPostPresent" resultMap="PostResultMap">
        select
            id,
            title,
            writer_id,
            written_time
        from t_post where is_deleted=0
    </select>

    <select id="getLastInsert" resultType="int">
        select max(id) from t_post
    </select>


</mapper>
